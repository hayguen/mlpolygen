
name: Release Asset

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release


jobs:

  release_job:

    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{steps.create_release.outputs.upload_url}}
      release_version: ${{env.RELEASE_VERSION}}
    steps:
    - uses: actions/checkout@v2
    - name: Get Release tag
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false


  build-on-windows:
    needs: [release_job]
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # windows-latest or windows-2022 fail!?
    runs-on: windows-2019

    steps:

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
        submodules:  recursive

    - name: Configure Visual Studio and CMake
      working-directory: ${{runner.workspace}}
      run: |
          # setup the compiler
          cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt"
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }
          # run cmake
          cmake -G "Visual Studio 16 2019" -A x64 -S mlpolygen -B build_mlpolygen -DWITHOUT_GMP=1

    - name: Build
      working-directory: ${{runner.workspace}}
      shell: bash
      run: cmake --build build_mlpolygen --config $BUILD_TYPE

    - name: Collect files to distribute and create ZIP
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        cp "${{runner.workspace}}/mlpolygen/README.rst" ./
        cp "${{runner.workspace}}/mlpolygen/LICENSE" ./
        cp "${{runner.workspace}}/build_mlpolygen/Release/lfsr_s.exe" ./
        cp "${{runner.workspace}}/build_mlpolygen/Release/mlpolygen.exe" ./
        cp "${{runner.workspace}}/build_mlpolygen/Release/PrimeFactorizer.exe" ./
        7z a mlpolygen-win-x64.zip README.rst LICENSE lfsr_s.exe mlpolygen.exe PrimeFactorizer.exe

    - name: Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object,
        # which include a `upload_url`. See this blog post for more info:
        # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        upload_url: ${{needs.release_job.outputs.upload_url}}
        asset_path: ${{runner.workspace}}/mlpolygen-win-x64.zip
        asset_name: mlpolygen-win-x64_${{needs.release_job.outputs.release_version}}.zip
        asset_content_type: application/zip
